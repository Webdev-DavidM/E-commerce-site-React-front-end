{"version":3,"sources":["Pages/AdminEditProduct.module.css","Pages/AdminEditProduct.js"],"names":["module","exports","AdminEditProduct","props","componentDidMount","getProductFromServer","location","pathname","split","componentDidUpdate","newProps","nextState","product","name","price","brand","colour","category","subcategory","description","images","undefined","size","setState","chosenSubCat","small","medium","large","componentWillUnmount","clearProduct","handleSubmit","e","preventDefault","errors","user","readyToSubmit","state","prevState","Number","isInteger","parseInt","length","data","admin","email","token","productId","_id","updateProduct","viewProduct","history","push","closeModal","removeImage","index","deleteImage","id","updateCat","target","value","subCats","Object","keys","categories","allSubCats","forEach","cat","subsubcat","console","log","updateSubCat","handleChange","files","form","FormData","append","uploadImage","formData","editMore","imagesToDisplay","imagesArrayForMulter","showModal","initialState","this","options","map","unshift","defaultValue","className","styles","editproductcontainer","productmodal","style","textAlign","color","onClick","viewproductbtn","editproductbtn","gobackbtn","to","editformcontainer","onSubmit","encType","placeholder","onChange","type","htmlFor","class","uploadbtn","display","accept","multiple","imagecontainer","image","imagebtn","imagehover","height","width","padding","src","alt","sizecontainer","smallcontainer","sizeinput","dropdown","disabled","submitbtn","error","Component","withRouter","connect","products","selectedProduct","productCreated","productCreatedModal","productEditedModal","editedProductId","latestEditedProductId","dispatch","createNewProduct","createProduct","closeProductEditedModal","getProduct","updateProductOnServer","deleteImageFromServer","uploadImageToServer","clearSelectedProduct"],"mappings":"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","file":"static/js/14.937cdc13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"editproductcontainer\":\"AdminEditProduct_editproductcontainer__-7HGn\",\"viewproductbtn\":\"AdminEditProduct_viewproductbtn__1keID\",\"editproductbtn\":\"AdminEditProduct_editproductbtn__X-IQt\",\"productmodal\":\"AdminEditProduct_productmodal__1_gN0\",\"product\":\"AdminEditProduct_product__1Xq2H\",\"productbtn\":\"AdminEditProduct_productbtn__2owQS\",\"sizeinput\":\"AdminEditProduct_sizeinput__MsJWt\",\"smallcontainer\":\"AdminEditProduct_smallcontainer__2CSn-\",\"sizecontainer\":\"AdminEditProduct_sizecontainer__2oFZw\",\"submitbtn\":\"AdminEditProduct_submitbtn__1qqvg\",\"uploadbtn\":\"AdminEditProduct_uploadbtn__2HCNA\",\"editformcontainer\":\"AdminEditProduct_editformcontainer___iEOK\",\"gobackbtn\":\"AdminEditProduct_gobackbtn__1XhHE\",\"dropdown\":\"AdminEditProduct_dropdown__-Rqya\",\"imagecontainer\":\"AdminEditProduct_imagecontainer__1Zpxi\",\"imagebtn\":\"AdminEditProduct_imagebtn__1uc10\",\"imagehover\":\"AdminEditProduct_imagehover__2766O\",\"error\":\"AdminEditProduct_error__1bF4x\"};","/* NPM packages */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\n/* CSS */\n\nimport styles from './AdminEditProduct.module.css';\n\n/* Action creators */\n\nimport {\n  createProduct,\n  closeProductEditedModal,\n  getProduct,\n  updateProductOnServer,\n  deleteImageFromServer,\n  uploadImageToServer,\n  clearSelectedProduct,\n} from '../Actions/products.js';\n\nclass AdminEditProduct extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      price: 0,\n      imagesToDisplay: [],\n      imagesArrayForMulter: [],\n      brand: '',\n      small: 0,\n      medium: 0,\n      large: 0,\n      size: '',\n      category: '',\n      subcategory: [],\n      chosenSubCat: '',\n      description: '',\n      errors: [],\n      colour: '',\n      showModal: false,\n    };\n\n    // Set the default state immediately, I will use this to reset state and clear it once the form is completed\n    this.initialState = this.state;\n  }\n\n  componentDidMount = () => {\n    let { getProductFromServer } = this.props;\n    let id = this.props.location.pathname.split('/')[3];\n    getProductFromServer(id);\n  };\n\n  // I use component did update to get the props from the redux store to prepopulate\n  // form by updating state. I do this by mkaing sure the props have changed ( except the\n  // images which are deleted and added to the server separately )\n\n  componentDidUpdate = (newProps, nextState) => {\n    let {\n      name,\n      price,\n      brand,\n      colour,\n      category,\n\n      subcategory,\n      description,\n    } = this.props.product;\n\n    if (this.props.images === newProps.images) {\n      if (this.props.product !== newProps.product) {\n        if (this.props.product.size !== undefined) {\n          this.setState({\n            name: name,\n            price: price,\n            brand: brand,\n            colour: colour,\n            chosenSubCat: subcategory,\n            small: this.props.product.size[0].small,\n            medium: this.props.product.size[0].medium,\n            large: this.props.product.size[0].large,\n            category: category,\n            subcategory: [subcategory],\n            description: description,\n          });\n        }\n      }\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.props.clearProduct();\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({ errors: [] });\n    let { user } = this.props;\n    this.setState({ errors: [] });\n    let readyToSubmit = true;\n\n    if (this.state.name === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for name'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.small === '' ||\n      !Number.isInteger(parseInt(this.state.small))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for small'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.medium === '' ||\n      !Number.isInteger(parseInt(this.state.medium))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for medium'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.large === '' ||\n      !Number.isInteger(parseInt(this.state.large))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for large'],\n      }));\n      readyToSubmit = false;\n    }\n    if (this.state.colour === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for colour'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.price === 0 ||\n      !Number.isInteger(parseInt(this.state.price))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for price'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.props.product.images.length === 0) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide at least one image'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.state.brand === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for brand'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.state.category === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for category'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.state.description === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for description'],\n      }));\n      readyToSubmit = false;\n    }\n    if (this.state.chosenSubCat === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for subcategory'],\n      }));\n    }\n    if (readyToSubmit) {\n      //The images have already been deleted or uploaded to the server on this route, therefore\n      //i can send the data as json rather than formData\n\n      // Note you have to append each key/value pair individually\n      let productUpdateInfo = {\n        name: this.state.name,\n        price: this.state.price,\n        brand: this.state.brand,\n        colour: this.state.colour,\n        size: {\n          small: this.state.small,\n          medium: this.state.medium,\n          large: this.state.large,\n        },\n        category: this.state.category,\n        subcategory: this.state.chosenSubCat,\n        description: this.state.description,\n      };\n\n      let data = {\n        data: productUpdateInfo,\n        admin: { email: user.email, token: user.token },\n        productId: this.props.product._id,\n      };\n\n      this.props.updateProduct(data);\n    }\n  };\n\n  viewProduct = () => {\n    this.props.history.push(`/product/${this.props.product._id}`);\n    this.props.closeModal();\n  };\n\n  removeImage = (index) => {\n    let { email, token } = this.props.user;\n    // Below the images are removed from the actual image files being sent to express and multer, the other is\n    // the image files being displayed as previews on the page ( using the filereader API)\n    this.props.deleteImage({\n      index: index,\n      id: this.props.product._id,\n      admin: { email: email, token: token },\n    });\n  };\n\n  updateCat = (e) => {\n    if (e.target.value !== 'blank') {\n      let subCats = Object.keys(this.props.categories[e.target.value]);\n      let allSubCats = [];\n      subCats.forEach((cat) => [\n        this.props.categories[e.target.value][cat].forEach((subsubcat) => {\n          return allSubCats.push(subsubcat);\n        }),\n      ]);\n      console.log(allSubCats);\n      this.setState({ category: e.target.value, subcategory: allSubCats });\n    }\n  };\n\n  updateSubCat = (e) => {\n    this.setState({ chosenSubCat: e.target.value });\n  };\n\n  handleChange = (e) => {\n    // This first if statement checks if I am dealing with an image upload, if so then it firstly adds the actual image file to\n    // to array in state which I can then send to the back end, this is added to the formData in the submit function, the second part uses the file reader\n    // to produce images which can be actually viewed as a preview on the page, both are stored in different arrays in state as they contain different files\n    if (e.target.files) {\n      let { email, token } = this.props.user;\n      // Below the images are removed from the actual image files being sent to express and multer, the other is\n      // the image files being displayed as previews on the page ( using the filereader API)\n      let form = new FormData();\n      form.append('image', e.target.files[0]);\n\n      this.props.uploadImage({\n        formData: form,\n        id: this.props.product._id,\n        admin: { email: email, token: token },\n      });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  editMore = () => {\n    this.props.closeModal();\n    this.props.history.push('/admin');\n  };\n\n  render() {\n    let { categories } = this.props;\n    let { product } = this.props;\n    let { showModal } = this.props;\n    let options = Object.keys(categories).map((category, index) => (\n      <option key={`category${index}`} name='category' value={category}>\n        {category}\n      </option>\n    ));\n    options.unshift(\n      <option key={'blank-option'} defaultValue value='blank'>\n        -- select an option --{' '}\n      </option>\n    );\n\n    return (\n      <>\n        <div className={styles.editproductcontainer}>\n          {showModal && (\n            <div className={styles.productmodal}>\n              <div className={styles.product}>\n                <h2 style={{ textAlign: 'center', color: '#2c3e50' }}>\n                  {' '}\n                  <i className='fas fa-check'></i>\n                  &nbsp;Product edited successfully! Would you like to{' '}\n                </h2>\n                <button\n                  onClick={() => this.viewProduct()}\n                  className={styles.viewproductbtn}>\n                  View the product in our store\n                </button>\n                <button\n                  onClick={() => this.editMore()}\n                  className={styles.editproductbtn}>\n                  Edit another product\n                </button>\n              </div>\n            </div>\n          )}\n          <h4>\n            <button className={styles.gobackbtn}>\n              <Link style={{ color: '#ecf0f1' }} to='/admin'>\n                Go back\n              </Link>{' '}\n            </button>\n          </h4>\n          <h2>EDIT PRODUCT</h2>\n          <div className={styles.editformcontainer}>\n            <form onSubmit={this.handleSubmit} encType='multipart/form-data'>\n              <label>\n                Name:\n                <input\n                  placeholder={product && product.name}\n                  name='name'\n                  value={this.state.name}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <label>\n                Price\n                <input\n                  type='text'\n                  name='price'\n                  value={this.state.price}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              Please upload the images below\n              <label htmlFor='uploadbtn' class={styles.uploadbtn}>\n                {' '}\n                Upload Images\n              </label>\n              <input\n                style={{ display: 'none' }}\n                onChange={(e) => this.handleChange(e)}\n                id='uploadbtn'\n                type='file'\n                accept='.jpg, .png,.jpeg'\n                multiple=''\n              />\n              <div className={styles.imagecontainer}>\n                {product.length !== 0 &&\n                  product.images.map((image, index) => (\n                    <div\n                      key={`image${index}`}\n                      onClick={() => this.removeImage(index)}\n                      className={styles.imagebtn}>\n                      <div className={styles.imagehover}>X</div>\n                      <img\n                        style={{\n                          height: '4rem',\n                          width: '6rem',\n                          padding: '0 0.5rem',\n                        }}\n                        src={`https://my-ecommerce-site-fitness.herokuapp.com/${image}`}\n                        alt=''></img>\n                    </div>\n                  ))}\n              </div>\n              <label>\n                Brand\n                <input\n                  type='text'\n                  placeholder={this.props.product && this.props.product.brand}\n                  name='brand'\n                  value={this.state.brand}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <label>\n                Colour\n                <input\n                  type='text'\n                  name='colour'\n                  value={this.state.colour}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <label>\n                Stock :\n                {this.state.small !== '' &&\n                this.state.medium !== '' &&\n                this.state.large !== ''\n                  ? parseInt(this.state.small) +\n                    parseInt(this.state.medium) +\n                    parseInt(this.state.large)\n                  : null}\n                <br />\n                Please enter amounts in each size below\n                <div className={styles.sizecontainer}>\n                  <div className={styles.smallcontainer}>\n                    <span> Small </span>\n                    <input\n                      className={styles.sizeinput}\n                      type='text'\n                      name='small'\n                      value={this.state.small}\n                      onChange={(e) => this.handleChange(e)}\n                    />\n                    <span> Medium</span>\n                    <input\n                      className={styles.sizeinput}\n                      type='text'\n                      name='medium'\n                      value={this.state.medium}\n                      onChange={(e) => this.handleChange(e)}\n                    />\n                    <span> Large </span>\n                    <input\n                      className={styles.sizeinput}\n                      type='text'\n                      name='large'\n                      value={this.state.large}\n                      onChange={(e) => this.handleChange(e)}\n                    />\n                  </div>\n                </div>\n              </label>\n              <label>\n                Category\n                <br />\n                <select\n                  className={styles.dropdown}\n                  value={this.state.category}\n                  onChange={(e) => this.updateCat(e)}>\n                  {options}\n                </select>\n              </label>\n              <label>\n                Subcategory\n                <br />\n                <select\n                  className={styles.dropdown}\n                  disabled={this.state.subcategory.length === 1}\n                  value={this.state.chosenSubCat}\n                  onChange={(e) => this.updateSubCat(e)}>\n                  <option value='blank'>-- select an option -- </option>\n                  {this.state.subcategory.length &&\n                    this.state.subcategory.map((subcategory, index) => (\n                      <option\n                        key={`subcategory${index}`}\n                        name='subcategory'\n                        value={subcategory}>\n                        {subcategory}\n                      </option>\n                    ))}\n                </select>\n              </label>\n              <label>\n                Description\n                <textarea\n                  placeholder={\n                    this.props.product && this.props.product.description\n                  }\n                  className={styles.description}\n                  type='textarea'\n                  name='description'\n                  value={this.state.description}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <input\n                className={styles.submitbtn}\n                type='submit'\n                value='Submit'\n              />\n            </form>\n            {this.state.errors &&\n              this.state.errors.map((error, index) => (\n                <p key={`error${index}`} className={styles.error}>\n                  {error}\n                </p>\n              ))}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    categories: state.products.categories,\n    user: state.user.user,\n    product: state.products.selectedProduct,\n    productCreated: state.products.productCreatedModal,\n    showModal: state.products.productEditedModal,\n    editedProductId: state.products.latestEditedProductId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createNewProduct: (data) => dispatch(createProduct(data)),\n    closeModal: () => dispatch(closeProductEditedModal()),\n    getProductFromServer: (id) => dispatch(getProduct(id)),\n    updateProduct: (data) => dispatch(updateProductOnServer(data)),\n    deleteImage: (data) => dispatch(deleteImageFromServer(data)),\n    uploadImage: (data) => {\n      dispatch(uploadImageToServer(data));\n    },\n    clearProduct: () => dispatch(clearSelectedProduct()),\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AdminEditProduct)\n);\n"],"sourceRoot":""}